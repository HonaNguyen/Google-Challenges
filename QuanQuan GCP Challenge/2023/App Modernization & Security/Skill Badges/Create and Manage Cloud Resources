This is the solution

Task 1. Create a project jumphost instance

You will use this instance to perform maintenance for the project.

Requirements:
    Name the instance Instance name.
    Use an f1-micro machine type.
    Use the default image type (Debian Linux).

Solutions:
  
  Write the below parameters, check machine type, and Image type.
  The name of instance be nucleus-jumphost
  Region be Default Region
  Zone be Default Zone
  The machine type be f1-micro. (series N1 for windows)
  Using the default image type (Debian Linux)
  Click Create
  
  Relevant code:
  
  gcloud compute instances create nucleus-jumphost \
  --network nucleus-vpc \
  --zone us-east1-b  \
  --machine-type f1-micro  \
  --image-family debian-9  \
  --image-project debian-cloud 

=======================================================================================================================================================================

Task 2. Create a Kubernetes service cluster

The team is building an application that will use a service running on Kubernetes. You need to:

    Create a zonal cluster using <filled in at lab start>.
    Use the Docker container hello-app (gcr.io/google-samples/hello-app:2.0) as a placeholder; the team will replace the container with their own work later.
    Expose the app on port App port number.
    
 Solutions:
 
 <Create Zonal Cluster>
 
 gcloud container clusters create nucleus-backend \
          --num-nodes 1 \
          --network nucleus-vpc \
          --zone [ZONE]
          
gcloud container clusters get-credentials nucleus-backend \
          --zone [ZONE]
          
<Using the Docker>

kubectl create deployment hello-server \
          --image=gcr.io/google-samples/hello-app:2.0

<Expose the port>

kubectl expose deployment hello-server \
          --type=LoadBalancer \
          --port [PORT_NO]

=====================================================================================================================================================================


Task 3. Set up an HTTP load balancer

You will serve the site via nginx web servers, but you want to ensure that the environment is fault-tolerant. 
Create an HTTP load balancer with a managed instance group of 2 nginx web servers.
Use the following code to configure the web servers; the team will replace this with their own configuration later.

You need to:

    Create an instance template.
    Create a target pool.
    Create a managed instance group.
    Create a firewall rule named as Firewall rule to allow traffic (80/tcp).
    Create a health check.
    Create a backend service, and attach the managed instance group with named port (http:80).
    Create a URL map, and target the HTTP proxy to route requests to your URL map.
    Create a forwarding rule.
    
Solutions:

** Activate the cloud shell and Copy and Paste the following commands**:

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF


** Creating an instance template**:
gcloud compute instance-templates create web-server-template \
          --metadata-from-file startup-script=startup.sh \
          --network nucleus-vpc \
          --machine-type g1-small \
          --region [REGION]

** Creating a managed instance group**:
gcloud compute instance-groups managed create web-server-group \
          --base-instance-name web-server \
          --size 2 \
          --template web-server-template \
          --region [REGION]

** Creating a firewall rule to allow traffic**:
gcloud compute firewall-rules create [FIREWALL_RULE] \
          --allow tcp:80 \
          --network nucleus-vpc

** Creating a health check**:
gcloud compute http-health-checks create http-basic-check

gcloud compute instance-groups managed \
          set-named-ports web-server-group \
          --named-ports http:80 \
          --region [REGION]

** Creating a backend service and attach the managed instance group**:
gcloud compute backend-services create web-server-backend \
          --protocol HTTP \
          --http-health-checks http-basic-check \
          --global


gcloud compute backend-services add-backend web-server-backend \
          --instance-group web-server-group \
          --instance-group-region [REGION] \
          --global


** Creating a URL map and target HTTP proxy to route requests to your URL map**:
gcloud compute url-maps create web-server-map \
          --default-service web-server-backend


gcloud compute target-http-proxies create http-lb-proxy \
          --url-map web-server-map


** Creating forwarding rule**:
gcloud compute forwarding-rules create http-content-rule \
        --global \
        --target-http-proxy http-lb-proxy \
        --ports 80

gcloud compute forwarding-rules list

